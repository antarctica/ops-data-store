---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip  # for pipx/pip
    - .venv/      # for project dependencies

image:
  name: python:3.9-slim

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 📦 package

before_script:
    - apt-get update
    - apt-get install -y tree libxml2-utils
    - python --version
    - python -m pip install --upgrade pip
    - python -m pip install pipx
    - python -m pipx install poetry==1.4.2
    - python -m pipx ensurepath
    - export PATH=$PATH:/root/.local/bin
    - poetry --version
    - poetry check
    - poetry config virtualenvs.in-project true
    - poetry config repositories.gitlab "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN" --local
    - poetry install --no-interaction --no-ansi

test:
  stage: 🧪 test
  needs: []
  script:
    - poetry run pytest --strict-markers --random-order --cov --cov-report=html -o junit_family=xunit2 --junitxml=test-results.xml
  coverage: '/Total coverage: \d+\.\d+/'
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - htmlcov
    expire_in: 1 month
  rules:
    - changes:
        - '**/*.py'

lint:
  stage: 📋 lint
  needs: []
  script:
    - poetry run black --check src/ tests/
    - poetry run ruff check src/ tests/ --output-format gitlab > lint-results.json
    - poetry run safety check --full-report
  artifacts:
    reports:
      codequality: lint-results.json
  rules:
    - changes:
        - '**/*.py'
build:
  stage: 🏗 build
  needs: []
  script:
    - poetry build
  artifacts:
    paths:
      - dist/
    expire_in: 1 month

package:
  stage: 📦 package
  needs:
    - job: build
      artifacts: true
  script:
    - poetry publish --no-interaction --repository gitlab
  rules:
    - if: '$CI_COMMIT_TAG'
