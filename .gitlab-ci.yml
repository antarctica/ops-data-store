---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  # Python config
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  # DB config
  POSTGRES_HOST: postgres
  POSTGRES_DB: test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  APP_ODS_DB_DSN: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB"

  # AUTH config
  APP_ODS_AUTH_AZURE_AUTHORITY: "https://login.microsoftonline.com/example"
  APP_ODS_AUTH_AZURE_CLIENT_ID: "test"
  APP_ODS_AUTH_AZURE_CLIENT_SECRET: "xxx"
  APP_ODS_AUTH_LDAP_URL: "ldap://ldap.example.com:389"
  APP_ODS_AUTH_LDAP_BASE_DN: "dc=example,dc=com"
  APP_ODS_AUTH_LDAP_BIND_DN: "cn=test,dc=example,dc=com"
  APP_ODS_AUTH_LDAP_BIND_PASSWORD: "xxx"
  APP_ODS_AUTH_LDAP_OU_USERS: "users"
  APP_ODS_AUTH_LDAP_OU_GROUPS: "groups"
  APP_ODS_AUTH_LDAP_CXT_USERS: "cn"
  APP_ODS_AUTH_LDAP_CXT_GROUPS: "cn"

  # Data config
  APP_ODS_DATA_AIRNET_OUTPUT_PATH: "./outputs"
  APP_ODS_DATA_MANAGED_TABLE_NAMES: "test"

  # Backups config
  APP_ODS_BACKUPS_PATH: "./backups"
  APP_ODS_BACKUPS_COUNT: "3"

cache:
  paths:
    - .cache/pip  # for pipx/pip
    - .venv/      # for project dependencies

image:
  name: osgeo/gdal:ubuntu-small-3.4.3

stages:
  - üß™ test
  - üìã lint
  - üèó build
  - üì¶ package

.before_script_common: &before_script_common
    - apt-get update
    - apt-get install -y software-properties-common
    - add-apt-repository -y ppa:deadsnakes/ppa
    # if the base image changes from GDAL 3.4, the 'weasyprint' package should be reviewed and ideally reduced to the packages used in the Air Unit utility
    - apt-get install -y tree libxml2-utils libldap2-dev libsasl2-dev weasyprint python3-pip python3-venv python3.9 python3.9-venv python3.9-dev
    - python3.9 --version
    - python3.9 -m pip install --upgrade pip
    - python3.9 -m pip install pipx
    - python3.9 -m pipx install poetry==1.4.2
    - python3.9 -m pipx ensurepath
    - export PATH=$PATH:/root/.local/bin
    - export PATH=/root/.local/bin:$PATH
    - poetry --version
    - poetry check
    - poetry config virtualenvs.in-project true
    - poetry install --no-interaction --no-ansi
    - mkdir -p $APP_ODS_BACKUPS_PATH $APP_ODS_DATA_AIRNET_OUTPUT_PATH

before_script:
    - *before_script_common

test:
  stage: üß™ test
  needs: []
  before_script:
    - *before_script_common
    - poetry run python -c 'from ops_data_store.config import Config; c = Config(); print(c.DB_DSN)'
    - echo $APP_ODS_BACKUPS_PATH
  script:
    - poetry run pytest --strict-markers --random-order --cov --cov-report=html -o junit_family=xunit2 --junitxml=test-results.xml
  coverage: '/Total coverage: \d+\.\d+/'
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - htmlcov
    expire_in: 1 month
  rules:
    -
      changes:
        - '**/*.py'
        - 'pyproject.toml'
      if: '$CI_COMMIT_BRANCH != "main"'

lint:
  stage: üìã lint
  needs: []
  script:
    - poetry run ruff check src/ tests/
    - poetry run ruff format --check src/ tests/
    - poetry run safety --stage cicd scan --detailed-output
  rules:
    -
      changes:
        - '**/*.py'
        - 'pyproject.toml'
      if: '$CI_COMMIT_BRANCH != "main"'

build:
  stage: üèó build
  needs: []
  script:
    - poetry build
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  rules:
    -
      changes:
        - '**/*.py'
        - 'pyproject.toml'
      if: '$CI_COMMIT_BRANCH != "main" || $CI_COMMIT_TAG != null'

package:
  stage: üì¶ package
  needs:
    - job: build
      artifacts: true
  before_script:
    - *before_script_common
    - poetry config repositories.gitlab "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN" --local
  script:
    - poetry publish --no-interaction --repository gitlab
  rules:
    - if: '$CI_COMMIT_TAG'
